<?php
/**
 * TransactionsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  ClearentTransactionsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Clearent Transactions API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ClearentTransactionsApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ClearentTransactionsApi\ApiException;
use ClearentTransactionsApi\Configuration;
use ClearentTransactionsApi\HeaderSelector;
use ClearentTransactionsApi\ObjectSerializer;

/**
 * TransactionsApi Class Doc Comment
 *
 * @category Class
 * @package  ClearentTransactionsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TransactionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation mobileSaleTransaction
     *
     * @param  \ClearentTransactionsApi\Model\SaleTransactionPayload $sale_transaction_payload sale_transaction_payload (optional)
     *
     * @throws \ClearentTransactionsApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ClearentTransactionsApi\Model\SingleTransactionResponse
     */
    public function mobileSaleTransaction($sale_transaction_payload = null)
    {
        list($response) = $this->mobileSaleTransactionWithHttpInfo($sale_transaction_payload);
        return $response;
    }

    /**
     * Operation mobileSaleTransactionWithHttpInfo
     *
     * @param  \ClearentTransactionsApi\Model\SaleTransactionPayload $sale_transaction_payload (optional)
     *
     * @throws \ClearentTransactionsApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ClearentTransactionsApi\Model\SingleTransactionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mobileSaleTransactionWithHttpInfo($sale_transaction_payload = null)
    {
        $request = $this->mobileSaleTransactionRequest($sale_transaction_payload);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ClearentTransactionsApi\Model\SingleTransactionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClearentTransactionsApi\Model\SingleTransactionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClearentTransactionsApi\Model\SingleTransactionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ClearentTransactionsApi\Model\SingleTransactionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClearentTransactionsApi\Model\SingleTransactionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mobileSaleTransactionAsync
     *
     * @param  \ClearentTransactionsApi\Model\SaleTransactionPayload $sale_transaction_payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mobileSaleTransactionAsync($sale_transaction_payload = null)
    {
        return $this->mobileSaleTransactionAsyncWithHttpInfo($sale_transaction_payload)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mobileSaleTransactionAsyncWithHttpInfo
     *
     * @param  \ClearentTransactionsApi\Model\SaleTransactionPayload $sale_transaction_payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mobileSaleTransactionAsyncWithHttpInfo($sale_transaction_payload = null)
    {
        $returnType = '\ClearentTransactionsApi\Model\SingleTransactionResponse';
        $request = $this->mobileSaleTransactionRequest($sale_transaction_payload);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mobileSaleTransaction'
     *
     * @param  \ClearentTransactionsApi\Model\SaleTransactionPayload $sale_transaction_payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mobileSaleTransactionRequest($sale_transaction_payload = null)
    {

        $resourcePath = '/rest/v2/mobile/transactions/sale';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($sale_transaction_payload)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($sale_transaction_payload));
            } else {
                $httpBody = $sale_transaction_payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refundTransaction
     *
     * @param  \ClearentTransactionsApi\Model\RefundTransactionPayload $refund_transaction_payload refund_transaction_payload (optional)
     *
     * @throws \ClearentTransactionsApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ClearentTransactionsApi\Model\SingleTransactionResponse
     */
    public function refundTransaction($refund_transaction_payload = null)
    {
        list($response) = $this->refundTransactionWithHttpInfo($refund_transaction_payload);
        return $response;
    }

    /**
     * Operation refundTransactionWithHttpInfo
     *
     * @param  \ClearentTransactionsApi\Model\RefundTransactionPayload $refund_transaction_payload (optional)
     *
     * @throws \ClearentTransactionsApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ClearentTransactionsApi\Model\SingleTransactionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function refundTransactionWithHttpInfo($refund_transaction_payload = null)
    {
        $request = $this->refundTransactionRequest($refund_transaction_payload);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ClearentTransactionsApi\Model\SingleTransactionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClearentTransactionsApi\Model\SingleTransactionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClearentTransactionsApi\Model\SingleTransactionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ClearentTransactionsApi\Model\SingleTransactionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClearentTransactionsApi\Model\SingleTransactionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation refundTransactionAsync
     *
     * @param  \ClearentTransactionsApi\Model\RefundTransactionPayload $refund_transaction_payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundTransactionAsync($refund_transaction_payload = null)
    {
        return $this->refundTransactionAsyncWithHttpInfo($refund_transaction_payload)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refundTransactionAsyncWithHttpInfo
     *
     * @param  \ClearentTransactionsApi\Model\RefundTransactionPayload $refund_transaction_payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundTransactionAsyncWithHttpInfo($refund_transaction_payload = null)
    {
        $returnType = '\ClearentTransactionsApi\Model\SingleTransactionResponse';
        $request = $this->refundTransactionRequest($refund_transaction_payload);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'refundTransaction'
     *
     * @param  \ClearentTransactionsApi\Model\RefundTransactionPayload $refund_transaction_payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function refundTransactionRequest($refund_transaction_payload = null)
    {

        $resourcePath = '/rest/v2/transactions/refund';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($refund_transaction_payload)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($refund_transaction_payload));
            } else {
                $httpBody = $refund_transaction_payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation saleTransaction
     *
     * @param  \ClearentTransactionsApi\Model\SaleTransactionPayload $sale_transaction_payload sale_transaction_payload (optional)
     *
     * @throws \ClearentTransactionsApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ClearentTransactionsApi\Model\SingleTransactionResponse
     */
    public function saleTransaction($sale_transaction_payload = null)
    {
        list($response) = $this->saleTransactionWithHttpInfo($sale_transaction_payload);
        return $response;
    }

    /**
     * Operation saleTransactionWithHttpInfo
     *
     * @param  \ClearentTransactionsApi\Model\SaleTransactionPayload $sale_transaction_payload (optional)
     *
     * @throws \ClearentTransactionsApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ClearentTransactionsApi\Model\SingleTransactionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function saleTransactionWithHttpInfo($sale_transaction_payload = null)
    {
        $request = $this->saleTransactionRequest($sale_transaction_payload);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ClearentTransactionsApi\Model\SingleTransactionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClearentTransactionsApi\Model\SingleTransactionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClearentTransactionsApi\Model\SingleTransactionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ClearentTransactionsApi\Model\SingleTransactionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClearentTransactionsApi\Model\SingleTransactionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation saleTransactionAsync
     *
     * @param  \ClearentTransactionsApi\Model\SaleTransactionPayload $sale_transaction_payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saleTransactionAsync($sale_transaction_payload = null)
    {
        return $this->saleTransactionAsyncWithHttpInfo($sale_transaction_payload)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation saleTransactionAsyncWithHttpInfo
     *
     * @param  \ClearentTransactionsApi\Model\SaleTransactionPayload $sale_transaction_payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saleTransactionAsyncWithHttpInfo($sale_transaction_payload = null)
    {
        $returnType = '\ClearentTransactionsApi\Model\SingleTransactionResponse';
        $request = $this->saleTransactionRequest($sale_transaction_payload);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'saleTransaction'
     *
     * @param  \ClearentTransactionsApi\Model\SaleTransactionPayload $sale_transaction_payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function saleTransactionRequest($sale_transaction_payload = null)
    {

        $resourcePath = '/rest/v2/transactions/sale';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($sale_transaction_payload)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($sale_transaction_payload));
            } else {
                $httpBody = $sale_transaction_payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchTransactions
     *
     * @param  string $amount amount (optional)
     * @param  string $authorization_code authorization_code (optional)
     * @param  string $display_message display_message (optional)
     * @param  string $end_date The end date used with the &#x60;start-date&#x60; field to filter by a date range. Accepted formats include - MM-dd-yyyy hh:mm a, MM-dd-yy HH:mm, MM-dd-yy HH:mm z, yyyy-MM-dd HH:mm, yyyy-MM-dd HH:mm z. (optional)
     * @param  string $id id (optional)
     * @param  string $invoice invoice (optional)
     * @param  string $is_descending is_descending (optional, default to 'true')
     * @param  string $last_four last_four (optional)
     * @param  string $level level (optional, default to 'terminal')
     * @param  string $order_id order_id (optional)
     * @param  string $page_size page_size (optional)
     * @param  string $page page (optional)
     * @param  string $start_date The start date used with the &#x60;end-date&#x60; field to filter by a date range. Accepted formats include - MM-dd-yyyy hh:mm a, MM-dd-yy HH:mm, MM-dd-yy HH:mm z, yyyy-MM-dd HH:mm, yyyy-MM-dd HH:mm z. (optional)
     * @param  string $status status (optional)
     * @param  string $type The type of transaction. (optional)
     *
     * @throws \ClearentTransactionsApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ClearentTransactionsApi\Model\SearchTransactionResponse
     */
    public function searchTransactions($amount = null, $authorization_code = null, $display_message = null, $end_date = null, $id = null, $invoice = null, $is_descending = 'true', $last_four = null, $level = 'terminal', $order_id = null, $page_size = null, $page = null, $start_date = null, $status = null, $type = null)
    {
        list($response) = $this->searchTransactionsWithHttpInfo($amount, $authorization_code, $display_message, $end_date, $id, $invoice, $is_descending, $last_four, $level, $order_id, $page_size, $page, $start_date, $status, $type);
        return $response;
    }

    /**
     * Operation searchTransactionsWithHttpInfo
     *
     * @param  string $amount (optional)
     * @param  string $authorization_code (optional)
     * @param  string $display_message (optional)
     * @param  string $end_date The end date used with the &#x60;start-date&#x60; field to filter by a date range. Accepted formats include - MM-dd-yyyy hh:mm a, MM-dd-yy HH:mm, MM-dd-yy HH:mm z, yyyy-MM-dd HH:mm, yyyy-MM-dd HH:mm z. (optional)
     * @param  string $id (optional)
     * @param  string $invoice (optional)
     * @param  string $is_descending (optional, default to 'true')
     * @param  string $last_four (optional)
     * @param  string $level (optional, default to 'terminal')
     * @param  string $order_id (optional)
     * @param  string $page_size (optional)
     * @param  string $page (optional)
     * @param  string $start_date The start date used with the &#x60;end-date&#x60; field to filter by a date range. Accepted formats include - MM-dd-yyyy hh:mm a, MM-dd-yy HH:mm, MM-dd-yy HH:mm z, yyyy-MM-dd HH:mm, yyyy-MM-dd HH:mm z. (optional)
     * @param  string $status (optional)
     * @param  string $type The type of transaction. (optional)
     *
     * @throws \ClearentTransactionsApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ClearentTransactionsApi\Model\SearchTransactionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchTransactionsWithHttpInfo($amount = null, $authorization_code = null, $display_message = null, $end_date = null, $id = null, $invoice = null, $is_descending = 'true', $last_four = null, $level = 'terminal', $order_id = null, $page_size = null, $page = null, $start_date = null, $status = null, $type = null)
    {
        $request = $this->searchTransactionsRequest($amount, $authorization_code, $display_message, $end_date, $id, $invoice, $is_descending, $last_four, $level, $order_id, $page_size, $page, $start_date, $status, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ClearentTransactionsApi\Model\SearchTransactionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ClearentTransactionsApi\Model\SearchTransactionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ClearentTransactionsApi\Model\SearchTransactionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ClearentTransactionsApi\Model\SearchTransactionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClearentTransactionsApi\Model\SearchTransactionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchTransactionsAsync
     *
     * @param  string $amount (optional)
     * @param  string $authorization_code (optional)
     * @param  string $display_message (optional)
     * @param  string $end_date The end date used with the &#x60;start-date&#x60; field to filter by a date range. Accepted formats include - MM-dd-yyyy hh:mm a, MM-dd-yy HH:mm, MM-dd-yy HH:mm z, yyyy-MM-dd HH:mm, yyyy-MM-dd HH:mm z. (optional)
     * @param  string $id (optional)
     * @param  string $invoice (optional)
     * @param  string $is_descending (optional, default to 'true')
     * @param  string $last_four (optional)
     * @param  string $level (optional, default to 'terminal')
     * @param  string $order_id (optional)
     * @param  string $page_size (optional)
     * @param  string $page (optional)
     * @param  string $start_date The start date used with the &#x60;end-date&#x60; field to filter by a date range. Accepted formats include - MM-dd-yyyy hh:mm a, MM-dd-yy HH:mm, MM-dd-yy HH:mm z, yyyy-MM-dd HH:mm, yyyy-MM-dd HH:mm z. (optional)
     * @param  string $status (optional)
     * @param  string $type The type of transaction. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTransactionsAsync($amount = null, $authorization_code = null, $display_message = null, $end_date = null, $id = null, $invoice = null, $is_descending = 'true', $last_four = null, $level = 'terminal', $order_id = null, $page_size = null, $page = null, $start_date = null, $status = null, $type = null)
    {
        return $this->searchTransactionsAsyncWithHttpInfo($amount, $authorization_code, $display_message, $end_date, $id, $invoice, $is_descending, $last_four, $level, $order_id, $page_size, $page, $start_date, $status, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchTransactionsAsyncWithHttpInfo
     *
     * @param  string $amount (optional)
     * @param  string $authorization_code (optional)
     * @param  string $display_message (optional)
     * @param  string $end_date The end date used with the &#x60;start-date&#x60; field to filter by a date range. Accepted formats include - MM-dd-yyyy hh:mm a, MM-dd-yy HH:mm, MM-dd-yy HH:mm z, yyyy-MM-dd HH:mm, yyyy-MM-dd HH:mm z. (optional)
     * @param  string $id (optional)
     * @param  string $invoice (optional)
     * @param  string $is_descending (optional, default to 'true')
     * @param  string $last_four (optional)
     * @param  string $level (optional, default to 'terminal')
     * @param  string $order_id (optional)
     * @param  string $page_size (optional)
     * @param  string $page (optional)
     * @param  string $start_date The start date used with the &#x60;end-date&#x60; field to filter by a date range. Accepted formats include - MM-dd-yyyy hh:mm a, MM-dd-yy HH:mm, MM-dd-yy HH:mm z, yyyy-MM-dd HH:mm, yyyy-MM-dd HH:mm z. (optional)
     * @param  string $status (optional)
     * @param  string $type The type of transaction. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTransactionsAsyncWithHttpInfo($amount = null, $authorization_code = null, $display_message = null, $end_date = null, $id = null, $invoice = null, $is_descending = 'true', $last_four = null, $level = 'terminal', $order_id = null, $page_size = null, $page = null, $start_date = null, $status = null, $type = null)
    {
        $returnType = '\ClearentTransactionsApi\Model\SearchTransactionResponse';
        $request = $this->searchTransactionsRequest($amount, $authorization_code, $display_message, $end_date, $id, $invoice, $is_descending, $last_four, $level, $order_id, $page_size, $page, $start_date, $status, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchTransactions'
     *
     * @param  string $amount (optional)
     * @param  string $authorization_code (optional)
     * @param  string $display_message (optional)
     * @param  string $end_date The end date used with the &#x60;start-date&#x60; field to filter by a date range. Accepted formats include - MM-dd-yyyy hh:mm a, MM-dd-yy HH:mm, MM-dd-yy HH:mm z, yyyy-MM-dd HH:mm, yyyy-MM-dd HH:mm z. (optional)
     * @param  string $id (optional)
     * @param  string $invoice (optional)
     * @param  string $is_descending (optional, default to 'true')
     * @param  string $last_four (optional)
     * @param  string $level (optional, default to 'terminal')
     * @param  string $order_id (optional)
     * @param  string $page_size (optional)
     * @param  string $page (optional)
     * @param  string $start_date The start date used with the &#x60;end-date&#x60; field to filter by a date range. Accepted formats include - MM-dd-yyyy hh:mm a, MM-dd-yy HH:mm, MM-dd-yy HH:mm z, yyyy-MM-dd HH:mm, yyyy-MM-dd HH:mm z. (optional)
     * @param  string $status (optional)
     * @param  string $type The type of transaction. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchTransactionsRequest($amount = null, $authorization_code = null, $display_message = null, $end_date = null, $id = null, $invoice = null, $is_descending = 'true', $last_four = null, $level = 'terminal', $order_id = null, $page_size = null, $page = null, $start_date = null, $status = null, $type = null)
    {

        $resourcePath = '/rest/v2/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount,
            'amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authorization_code,
            'authorization-code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $display_message,
            'display-message', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_date,
            'end-date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $invoice,
            'invoice', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_descending,
            'isDescending', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_four,
            'last-four', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $level,
            'level', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id,
            'order-id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page-size', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_date,
            'start-date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
