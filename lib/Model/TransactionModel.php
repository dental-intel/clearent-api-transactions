<?php
/**
 * TransactionModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ClearentTransactionsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Clearent Transactions API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ClearentTransactionsApi\Model;

use \ArrayAccess;
use \ClearentTransactionsApi\ObjectSerializer;

/**
 * TransactionModel Class Doc Comment
 *
 * @category Class
 * @package  ClearentTransactionsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransactionModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransactionModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => 'string',
        'authorization_code' => 'string',
        'avs_result_code' => '\ClearentTransactionsApi\Model\AvsResultCode',
        'avs_result_code_description' => 'string',
        'avs_street' => 'string',
        'avs_zip' => 'string',
        'base_amount' => 'string',
        'batch_string_id' => 'string',
        'billing' => '\ClearentTransactionsApi\Model\Address',
        'billing_is_shipping' => '\ClearentTransactionsApi\Model\BillingIsShipping',
        'card' => 'string',
        'card_type' => '\ClearentTransactionsApi\Model\CardType',
        'cash_back_amount' => 'string',
        'check_field_duplicate' => 'bool',
        'client_ip' => 'string',
        'comments' => 'string',
        'contactless' => '\ClearentTransactionsApi\Model\Contactless',
        'contactless_device' => '\ClearentTransactionsApi\Model\ContactlessDevice',
        'created' => 'string',
        'csc' => 'string',
        'csc_result_code' => '\ClearentTransactionsApi\Model\CscResultCode',
        'csc_result_code_description' => 'string',
        'customer_first_name' => 'string',
        'customer_id' => 'string',
        'customer_last_name' => 'string',
        'cvm' => '\ClearentTransactionsApi\Model\Cvm',
        'description' => 'string',
        'display_message' => 'string',
        'ebt_additional_amounts' => '\ClearentTransactionsApi\Model\EBTAdditionalAmount[]',
        'email_address' => 'string',
        'emv' => '\ClearentTransactionsApi\Model\EMV',
        'emv_data' => 'string',
        'emv_data_response' => 'string',
        'emv_entry_method' => '\ClearentTransactionsApi\Model\EmvEntryMethod',
        'entry_method' => 'string',
        'exp_date' => 'string',
        'first_recurring_transaction' => 'string',
        'id' => 'string',
        'invoice' => 'string',
        'key_serial_number' => 'string',
        'last_four' => 'string',
        'level3' => '\ClearentTransactionsApi\Model\ClearentLevel3',
        'merchant_id' => 'string',
        'order_id' => 'string',
        'original_amount' => 'string',
        'partial_approved' => 'bool',
        'partial_authorization' => 'bool',
        'pending' => '\ClearentTransactionsApi\Model\Pending',
        'plan_name' => 'string',
        'platform_fees' => '\ClearentTransactionsApi\Model\PlatformFee[]',
        'purchase_order' => 'string',
        'ref_id' => 'string',
        'result' => '\ClearentTransactionsApi\Model\Result',
        'result_code' => 'string',
        'sales_tax_amount' => 'string',
        'sales_tax_type' => '\ClearentTransactionsApi\Model\SalesTaxType',
        'server_id' => 'string',
        'service_fee' => 'string',
        'settled' => '\ClearentTransactionsApi\Model\Settled',
        'shipping' => '\ClearentTransactionsApi\Model\Address',
        'signature_base_64_image' => 'string',
        'software_type' => 'string',
        'software_type_version' => 'string',
        'status' => 'string',
        'surcharge_applied' => 'bool',
        'terminal_id' => 'string',
        'tip_adjusted' => 'string',
        'tip_adjusted_amount' => 'string',
        'tip_amount' => 'string',
        'token_description' => 'string',
        'type' => '\ClearentTransactionsApi\Model\Type',
        'voided' => '\ClearentTransactionsApi\Model\Voided',
        'voided_auth' => '\ClearentTransactionsApi\Model\VoidedAuth',
        'voucher_approval_code' => 'string',
        'voucher_serial_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount' => null,
        'authorization_code' => null,
        'avs_result_code' => null,
        'avs_result_code_description' => null,
        'avs_street' => null,
        'avs_zip' => null,
        'base_amount' => null,
        'batch_string_id' => null,
        'billing' => null,
        'billing_is_shipping' => null,
        'card' => null,
        'card_type' => null,
        'cash_back_amount' => null,
        'check_field_duplicate' => null,
        'client_ip' => null,
        'comments' => null,
        'contactless' => null,
        'contactless_device' => null,
        'created' => null,
        'csc' => null,
        'csc_result_code' => null,
        'csc_result_code_description' => null,
        'customer_first_name' => null,
        'customer_id' => null,
        'customer_last_name' => null,
        'cvm' => null,
        'description' => null,
        'display_message' => null,
        'ebt_additional_amounts' => null,
        'email_address' => null,
        'emv' => null,
        'emv_data' => null,
        'emv_data_response' => null,
        'emv_entry_method' => null,
        'entry_method' => null,
        'exp_date' => null,
        'first_recurring_transaction' => null,
        'id' => null,
        'invoice' => null,
        'key_serial_number' => null,
        'last_four' => null,
        'level3' => null,
        'merchant_id' => null,
        'order_id' => null,
        'original_amount' => null,
        'partial_approved' => null,
        'partial_authorization' => null,
        'pending' => null,
        'plan_name' => null,
        'platform_fees' => null,
        'purchase_order' => null,
        'ref_id' => null,
        'result' => null,
        'result_code' => null,
        'sales_tax_amount' => null,
        'sales_tax_type' => null,
        'server_id' => null,
        'service_fee' => null,
        'settled' => null,
        'shipping' => null,
        'signature_base_64_image' => null,
        'software_type' => null,
        'software_type_version' => null,
        'status' => null,
        'surcharge_applied' => null,
        'terminal_id' => null,
        'tip_adjusted' => null,
        'tip_adjusted_amount' => null,
        'tip_amount' => null,
        'token_description' => null,
        'type' => null,
        'voided' => null,
        'voided_auth' => null,
        'voucher_approval_code' => null,
        'voucher_serial_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'authorization_code' => 'authorization-code',
        'avs_result_code' => 'avs-result-code',
        'avs_result_code_description' => 'avs-result-code-description',
        'avs_street' => 'avs-street',
        'avs_zip' => 'avs-zip',
        'base_amount' => 'base-amount',
        'batch_string_id' => 'batch-string-id',
        'billing' => 'billing',
        'billing_is_shipping' => 'billing-is-shipping',
        'card' => 'card',
        'card_type' => 'card-type',
        'cash_back_amount' => 'cash-back-amount',
        'check_field_duplicate' => 'check-field-duplicate',
        'client_ip' => 'client-ip',
        'comments' => 'comments',
        'contactless' => 'contactless',
        'contactless_device' => 'contactless-device',
        'created' => 'created',
        'csc' => 'csc',
        'csc_result_code' => 'csc-result-code',
        'csc_result_code_description' => 'csc-result-code-description',
        'customer_first_name' => 'customer-first-name',
        'customer_id' => 'customer-id',
        'customer_last_name' => 'customer-last-name',
        'cvm' => 'cvm',
        'description' => 'description',
        'display_message' => 'display-message',
        'ebt_additional_amounts' => 'ebt-additional-amounts',
        'email_address' => 'email-address',
        'emv' => 'emv',
        'emv_data' => 'emv-data',
        'emv_data_response' => 'emv-data-response',
        'emv_entry_method' => 'emv-entry-method',
        'entry_method' => 'entry-method',
        'exp_date' => 'exp-date',
        'first_recurring_transaction' => 'first-recurring-transaction',
        'id' => 'id',
        'invoice' => 'invoice',
        'key_serial_number' => 'key-serial-number',
        'last_four' => 'last-four',
        'level3' => 'level3',
        'merchant_id' => 'merchant-id',
        'order_id' => 'order-id',
        'original_amount' => 'original-amount',
        'partial_approved' => 'partial-approved',
        'partial_authorization' => 'partial-authorization',
        'pending' => 'pending',
        'plan_name' => 'plan-name',
        'platform_fees' => 'platform-fees',
        'purchase_order' => 'purchase-order',
        'ref_id' => 'ref-id',
        'result' => 'result',
        'result_code' => 'result-code',
        'sales_tax_amount' => 'sales-tax-amount',
        'sales_tax_type' => 'sales-tax-type',
        'server_id' => 'serverId',
        'service_fee' => 'service-fee',
        'settled' => 'settled',
        'shipping' => 'shipping',
        'signature_base_64_image' => 'signature-base-64-image',
        'software_type' => 'software-type',
        'software_type_version' => 'software-type-version',
        'status' => 'status',
        'surcharge_applied' => 'surcharge-applied',
        'terminal_id' => 'terminal-id',
        'tip_adjusted' => 'tip-adjusted',
        'tip_adjusted_amount' => 'tip-adjusted-amount',
        'tip_amount' => 'tip-amount',
        'token_description' => 'token-description',
        'type' => 'type',
        'voided' => 'voided',
        'voided_auth' => 'voided-auth',
        'voucher_approval_code' => 'voucher-approval-code',
        'voucher_serial_number' => 'voucher-serial-number'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'authorization_code' => 'setAuthorizationCode',
        'avs_result_code' => 'setAvsResultCode',
        'avs_result_code_description' => 'setAvsResultCodeDescription',
        'avs_street' => 'setAvsStreet',
        'avs_zip' => 'setAvsZip',
        'base_amount' => 'setBaseAmount',
        'batch_string_id' => 'setBatchStringId',
        'billing' => 'setBilling',
        'billing_is_shipping' => 'setBillingIsShipping',
        'card' => 'setCard',
        'card_type' => 'setCardType',
        'cash_back_amount' => 'setCashBackAmount',
        'check_field_duplicate' => 'setCheckFieldDuplicate',
        'client_ip' => 'setClientIp',
        'comments' => 'setComments',
        'contactless' => 'setContactless',
        'contactless_device' => 'setContactlessDevice',
        'created' => 'setCreated',
        'csc' => 'setCsc',
        'csc_result_code' => 'setCscResultCode',
        'csc_result_code_description' => 'setCscResultCodeDescription',
        'customer_first_name' => 'setCustomerFirstName',
        'customer_id' => 'setCustomerId',
        'customer_last_name' => 'setCustomerLastName',
        'cvm' => 'setCvm',
        'description' => 'setDescription',
        'display_message' => 'setDisplayMessage',
        'ebt_additional_amounts' => 'setEbtAdditionalAmounts',
        'email_address' => 'setEmailAddress',
        'emv' => 'setEmv',
        'emv_data' => 'setEmvData',
        'emv_data_response' => 'setEmvDataResponse',
        'emv_entry_method' => 'setEmvEntryMethod',
        'entry_method' => 'setEntryMethod',
        'exp_date' => 'setExpDate',
        'first_recurring_transaction' => 'setFirstRecurringTransaction',
        'id' => 'setId',
        'invoice' => 'setInvoice',
        'key_serial_number' => 'setKeySerialNumber',
        'last_four' => 'setLastFour',
        'level3' => 'setLevel3',
        'merchant_id' => 'setMerchantId',
        'order_id' => 'setOrderId',
        'original_amount' => 'setOriginalAmount',
        'partial_approved' => 'setPartialApproved',
        'partial_authorization' => 'setPartialAuthorization',
        'pending' => 'setPending',
        'plan_name' => 'setPlanName',
        'platform_fees' => 'setPlatformFees',
        'purchase_order' => 'setPurchaseOrder',
        'ref_id' => 'setRefId',
        'result' => 'setResult',
        'result_code' => 'setResultCode',
        'sales_tax_amount' => 'setSalesTaxAmount',
        'sales_tax_type' => 'setSalesTaxType',
        'server_id' => 'setServerId',
        'service_fee' => 'setServiceFee',
        'settled' => 'setSettled',
        'shipping' => 'setShipping',
        'signature_base_64_image' => 'setSignatureBase64Image',
        'software_type' => 'setSoftwareType',
        'software_type_version' => 'setSoftwareTypeVersion',
        'status' => 'setStatus',
        'surcharge_applied' => 'setSurchargeApplied',
        'terminal_id' => 'setTerminalId',
        'tip_adjusted' => 'setTipAdjusted',
        'tip_adjusted_amount' => 'setTipAdjustedAmount',
        'tip_amount' => 'setTipAmount',
        'token_description' => 'setTokenDescription',
        'type' => 'setType',
        'voided' => 'setVoided',
        'voided_auth' => 'setVoidedAuth',
        'voucher_approval_code' => 'setVoucherApprovalCode',
        'voucher_serial_number' => 'setVoucherSerialNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'authorization_code' => 'getAuthorizationCode',
        'avs_result_code' => 'getAvsResultCode',
        'avs_result_code_description' => 'getAvsResultCodeDescription',
        'avs_street' => 'getAvsStreet',
        'avs_zip' => 'getAvsZip',
        'base_amount' => 'getBaseAmount',
        'batch_string_id' => 'getBatchStringId',
        'billing' => 'getBilling',
        'billing_is_shipping' => 'getBillingIsShipping',
        'card' => 'getCard',
        'card_type' => 'getCardType',
        'cash_back_amount' => 'getCashBackAmount',
        'check_field_duplicate' => 'getCheckFieldDuplicate',
        'client_ip' => 'getClientIp',
        'comments' => 'getComments',
        'contactless' => 'getContactless',
        'contactless_device' => 'getContactlessDevice',
        'created' => 'getCreated',
        'csc' => 'getCsc',
        'csc_result_code' => 'getCscResultCode',
        'csc_result_code_description' => 'getCscResultCodeDescription',
        'customer_first_name' => 'getCustomerFirstName',
        'customer_id' => 'getCustomerId',
        'customer_last_name' => 'getCustomerLastName',
        'cvm' => 'getCvm',
        'description' => 'getDescription',
        'display_message' => 'getDisplayMessage',
        'ebt_additional_amounts' => 'getEbtAdditionalAmounts',
        'email_address' => 'getEmailAddress',
        'emv' => 'getEmv',
        'emv_data' => 'getEmvData',
        'emv_data_response' => 'getEmvDataResponse',
        'emv_entry_method' => 'getEmvEntryMethod',
        'entry_method' => 'getEntryMethod',
        'exp_date' => 'getExpDate',
        'first_recurring_transaction' => 'getFirstRecurringTransaction',
        'id' => 'getId',
        'invoice' => 'getInvoice',
        'key_serial_number' => 'getKeySerialNumber',
        'last_four' => 'getLastFour',
        'level3' => 'getLevel3',
        'merchant_id' => 'getMerchantId',
        'order_id' => 'getOrderId',
        'original_amount' => 'getOriginalAmount',
        'partial_approved' => 'getPartialApproved',
        'partial_authorization' => 'getPartialAuthorization',
        'pending' => 'getPending',
        'plan_name' => 'getPlanName',
        'platform_fees' => 'getPlatformFees',
        'purchase_order' => 'getPurchaseOrder',
        'ref_id' => 'getRefId',
        'result' => 'getResult',
        'result_code' => 'getResultCode',
        'sales_tax_amount' => 'getSalesTaxAmount',
        'sales_tax_type' => 'getSalesTaxType',
        'server_id' => 'getServerId',
        'service_fee' => 'getServiceFee',
        'settled' => 'getSettled',
        'shipping' => 'getShipping',
        'signature_base_64_image' => 'getSignatureBase64Image',
        'software_type' => 'getSoftwareType',
        'software_type_version' => 'getSoftwareTypeVersion',
        'status' => 'getStatus',
        'surcharge_applied' => 'getSurchargeApplied',
        'terminal_id' => 'getTerminalId',
        'tip_adjusted' => 'getTipAdjusted',
        'tip_adjusted_amount' => 'getTipAdjustedAmount',
        'tip_amount' => 'getTipAmount',
        'token_description' => 'getTokenDescription',
        'type' => 'getType',
        'voided' => 'getVoided',
        'voided_auth' => 'getVoidedAuth',
        'voucher_approval_code' => 'getVoucherApprovalCode',
        'voucher_serial_number' => 'getVoucherSerialNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['authorization_code'] = $data['authorization_code'] ?? null;
        $this->container['avs_result_code'] = $data['avs_result_code'] ?? null;
        $this->container['avs_result_code_description'] = $data['avs_result_code_description'] ?? null;
        $this->container['avs_street'] = $data['avs_street'] ?? null;
        $this->container['avs_zip'] = $data['avs_zip'] ?? null;
        $this->container['base_amount'] = $data['base_amount'] ?? null;
        $this->container['batch_string_id'] = $data['batch_string_id'] ?? null;
        $this->container['billing'] = $data['billing'] ?? null;
        $this->container['billing_is_shipping'] = $data['billing_is_shipping'] ?? null;
        $this->container['card'] = $data['card'] ?? null;
        $this->container['card_type'] = $data['card_type'] ?? null;
        $this->container['cash_back_amount'] = $data['cash_back_amount'] ?? null;
        $this->container['check_field_duplicate'] = $data['check_field_duplicate'] ?? null;
        $this->container['client_ip'] = $data['client_ip'] ?? null;
        $this->container['comments'] = $data['comments'] ?? null;
        $this->container['contactless'] = $data['contactless'] ?? null;
        $this->container['contactless_device'] = $data['contactless_device'] ?? null;
        $this->container['created'] = $data['created'] ?? null;
        $this->container['csc'] = $data['csc'] ?? null;
        $this->container['csc_result_code'] = $data['csc_result_code'] ?? null;
        $this->container['csc_result_code_description'] = $data['csc_result_code_description'] ?? null;
        $this->container['customer_first_name'] = $data['customer_first_name'] ?? null;
        $this->container['customer_id'] = $data['customer_id'] ?? null;
        $this->container['customer_last_name'] = $data['customer_last_name'] ?? null;
        $this->container['cvm'] = $data['cvm'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['display_message'] = $data['display_message'] ?? null;
        $this->container['ebt_additional_amounts'] = $data['ebt_additional_amounts'] ?? null;
        $this->container['email_address'] = $data['email_address'] ?? null;
        $this->container['emv'] = $data['emv'] ?? null;
        $this->container['emv_data'] = $data['emv_data'] ?? null;
        $this->container['emv_data_response'] = $data['emv_data_response'] ?? null;
        $this->container['emv_entry_method'] = $data['emv_entry_method'] ?? null;
        $this->container['entry_method'] = $data['entry_method'] ?? null;
        $this->container['exp_date'] = $data['exp_date'] ?? null;
        $this->container['first_recurring_transaction'] = $data['first_recurring_transaction'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['invoice'] = $data['invoice'] ?? null;
        $this->container['key_serial_number'] = $data['key_serial_number'] ?? null;
        $this->container['last_four'] = $data['last_four'] ?? null;
        $this->container['level3'] = $data['level3'] ?? null;
        $this->container['merchant_id'] = $data['merchant_id'] ?? null;
        $this->container['order_id'] = $data['order_id'] ?? null;
        $this->container['original_amount'] = $data['original_amount'] ?? null;
        $this->container['partial_approved'] = $data['partial_approved'] ?? null;
        $this->container['partial_authorization'] = $data['partial_authorization'] ?? null;
        $this->container['pending'] = $data['pending'] ?? null;
        $this->container['plan_name'] = $data['plan_name'] ?? null;
        $this->container['platform_fees'] = $data['platform_fees'] ?? null;
        $this->container['purchase_order'] = $data['purchase_order'] ?? null;
        $this->container['ref_id'] = $data['ref_id'] ?? null;
        $this->container['result'] = $data['result'] ?? null;
        $this->container['result_code'] = $data['result_code'] ?? null;
        $this->container['sales_tax_amount'] = $data['sales_tax_amount'] ?? null;
        $this->container['sales_tax_type'] = $data['sales_tax_type'] ?? null;
        $this->container['server_id'] = $data['server_id'] ?? null;
        $this->container['service_fee'] = $data['service_fee'] ?? null;
        $this->container['settled'] = $data['settled'] ?? null;
        $this->container['shipping'] = $data['shipping'] ?? null;
        $this->container['signature_base_64_image'] = $data['signature_base_64_image'] ?? null;
        $this->container['software_type'] = $data['software_type'] ?? null;
        $this->container['software_type_version'] = $data['software_type_version'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['surcharge_applied'] = $data['surcharge_applied'] ?? null;
        $this->container['terminal_id'] = $data['terminal_id'] ?? null;
        $this->container['tip_adjusted'] = $data['tip_adjusted'] ?? null;
        $this->container['tip_adjusted_amount'] = $data['tip_adjusted_amount'] ?? null;
        $this->container['tip_amount'] = $data['tip_amount'] ?? null;
        $this->container['token_description'] = $data['token_description'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['voided'] = $data['voided'] ?? null;
        $this->container['voided_auth'] = $data['voided_auth'] ?? null;
        $this->container['voucher_approval_code'] = $data['voucher_approval_code'] ?? null;
        $this->container['voucher_serial_number'] = $data['voucher_serial_number'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['platform_fees']) && (count($this->container['platform_fees']) > 2)) {
            $invalidProperties[] = "invalid value for 'platform_fees', number of items must be less than or equal to 2.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return string|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string|null $amount The transaction amount.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets authorization_code
     *
     * @return string|null
     */
    public function getAuthorizationCode()
    {
        return $this->container['authorization_code'];
    }

    /**
     * Sets authorization_code
     *
     * @param string|null $authorization_code The authorization code from card issuers.
     *
     * @return self
     */
    public function setAuthorizationCode($authorization_code)
    {
        $this->container['authorization_code'] = $authorization_code;

        return $this;
    }

    /**
     * Gets avs_result_code
     *
     * @return \ClearentTransactionsApi\Model\AvsResultCode|null
     */
    public function getAvsResultCode()
    {
        return $this->container['avs_result_code'];
    }

    /**
     * Sets avs_result_code
     *
     * @param \ClearentTransactionsApi\Model\AvsResultCode|null $avs_result_code avs_result_code
     *
     * @return self
     */
    public function setAvsResultCode($avs_result_code)
    {
        $this->container['avs_result_code'] = $avs_result_code;

        return $this;
    }

    /**
     * Gets avs_result_code_description
     *
     * @return string|null
     */
    public function getAvsResultCodeDescription()
    {
        return $this->container['avs_result_code_description'];
    }

    /**
     * Sets avs_result_code_description
     *
     * @param string|null $avs_result_code_description The description for the AVS match.
     *
     * @return self
     */
    public function setAvsResultCodeDescription($avs_result_code_description)
    {
        $this->container['avs_result_code_description'] = $avs_result_code_description;

        return $this;
    }

    /**
     * Gets avs_street
     *
     * @return string|null
     */
    public function getAvsStreet()
    {
        return $this->container['avs_street'];
    }

    /**
     * Sets avs_street
     *
     * @param string|null $avs_street The billing address street.
     *
     * @return self
     */
    public function setAvsStreet($avs_street)
    {
        $this->container['avs_street'] = $avs_street;

        return $this;
    }

    /**
     * Gets avs_zip
     *
     * @return string|null
     */
    public function getAvsZip()
    {
        return $this->container['avs_zip'];
    }

    /**
     * Sets avs_zip
     *
     * @param string|null $avs_zip The billing address ZIP code.
     *
     * @return self
     */
    public function setAvsZip($avs_zip)
    {
        $this->container['avs_zip'] = $avs_zip;

        return $this;
    }

    /**
     * Gets base_amount
     *
     * @return string|null
     */
    public function getBaseAmount()
    {
        return $this->container['base_amount'];
    }

    /**
     * Sets base_amount
     *
     * @param string|null $base_amount When there is no 'service-fee', then this is the same as 'original-amount'. When there is a 'service-fee', then this is the 'original-amount' minus the 'service-fee' applied.
     *
     * @return self
     */
    public function setBaseAmount($base_amount)
    {
        $this->container['base_amount'] = $base_amount;

        return $this;
    }

    /**
     * Gets batch_string_id
     *
     * @return string|null
     */
    public function getBatchStringId()
    {
        return $this->container['batch_string_id'];
    }

    /**
     * Sets batch_string_id
     *
     * @param string|null $batch_string_id The string value of the batch ID.
     *
     * @return self
     */
    public function setBatchStringId($batch_string_id)
    {
        $this->container['batch_string_id'] = $batch_string_id;

        return $this;
    }

    /**
     * Gets billing
     *
     * @return \ClearentTransactionsApi\Model\Address|null
     */
    public function getBilling()
    {
        return $this->container['billing'];
    }

    /**
     * Sets billing
     *
     * @param \ClearentTransactionsApi\Model\Address|null $billing billing
     *
     * @return self
     */
    public function setBilling($billing)
    {
        $this->container['billing'] = $billing;

        return $this;
    }

    /**
     * Gets billing_is_shipping
     *
     * @return \ClearentTransactionsApi\Model\BillingIsShipping|null
     */
    public function getBillingIsShipping()
    {
        return $this->container['billing_is_shipping'];
    }

    /**
     * Sets billing_is_shipping
     *
     * @param \ClearentTransactionsApi\Model\BillingIsShipping|null $billing_is_shipping billing_is_shipping
     *
     * @return self
     */
    public function setBillingIsShipping($billing_is_shipping)
    {
        $this->container['billing_is_shipping'] = $billing_is_shipping;

        return $this;
    }

    /**
     * Gets card
     *
     * @return string|null
     */
    public function getCard()
    {
        return $this->container['card'];
    }

    /**
     * Sets card
     *
     * @param string|null $card The last four digits of the credit card associated with this transaction.
     *
     * @return self
     */
    public function setCard($card)
    {
        $this->container['card'] = $card;

        return $this;
    }

    /**
     * Gets card_type
     *
     * @return \ClearentTransactionsApi\Model\CardType|null
     */
    public function getCardType()
    {
        return $this->container['card_type'];
    }

    /**
     * Sets card_type
     *
     * @param \ClearentTransactionsApi\Model\CardType|null $card_type card_type
     *
     * @return self
     */
    public function setCardType($card_type)
    {
        $this->container['card_type'] = $card_type;

        return $this;
    }

    /**
     * Gets cash_back_amount
     *
     * @return string|null
     */
    public function getCashBackAmount()
    {
        return $this->container['cash_back_amount'];
    }

    /**
     * Sets cash_back_amount
     *
     * @param string|null $cash_back_amount The cash back amount when using EBT cash benefits.
     *
     * @return self
     */
    public function setCashBackAmount($cash_back_amount)
    {
        $this->container['cash_back_amount'] = $cash_back_amount;

        return $this;
    }

    /**
     * Gets check_field_duplicate
     *
     * @return bool|null
     */
    public function getCheckFieldDuplicate()
    {
        return $this->container['check_field_duplicate'];
    }

    /**
     * Sets check_field_duplicate
     *
     * @param bool|null $check_field_duplicate True if you send a 'check-field' in the request and a duplicate transaction is found.
     *
     * @return self
     */
    public function setCheckFieldDuplicate($check_field_duplicate)
    {
        $this->container['check_field_duplicate'] = $check_field_duplicate;

        return $this;
    }

    /**
     * Gets client_ip
     *
     * @return string|null
     */
    public function getClientIp()
    {
        return $this->container['client_ip'];
    }

    /**
     * Sets client_ip
     *
     * @param string|null $client_ip The client IP address.
     *
     * @return self
     */
    public function setClientIp($client_ip)
    {
        $this->container['client_ip'] = $client_ip;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments The transaction comments.
     *
     * @return self
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets contactless
     *
     * @return \ClearentTransactionsApi\Model\Contactless|null
     */
    public function getContactless()
    {
        return $this->container['contactless'];
    }

    /**
     * Sets contactless
     *
     * @param \ClearentTransactionsApi\Model\Contactless|null $contactless contactless
     *
     * @return self
     */
    public function setContactless($contactless)
    {
        $this->container['contactless'] = $contactless;

        return $this;
    }

    /**
     * Gets contactless_device
     *
     * @return \ClearentTransactionsApi\Model\ContactlessDevice|null
     */
    public function getContactlessDevice()
    {
        return $this->container['contactless_device'];
    }

    /**
     * Sets contactless_device
     *
     * @param \ClearentTransactionsApi\Model\ContactlessDevice|null $contactless_device contactless_device
     *
     * @return self
     */
    public function setContactlessDevice($contactless_device)
    {
        $this->container['contactless_device'] = $contactless_device;

        return $this;
    }

    /**
     * Gets created
     *
     * @return string|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string|null $created The datetime in UTC when the transaction was initiated.
     *
     * @return self
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets csc
     *
     * @return string|null
     */
    public function getCsc()
    {
        return $this->container['csc'];
    }

    /**
     * Sets csc
     *
     * @param string|null $csc The CSC.
     *
     * @return self
     */
    public function setCsc($csc)
    {
        $this->container['csc'] = $csc;

        return $this;
    }

    /**
     * Gets csc_result_code
     *
     * @return \ClearentTransactionsApi\Model\CscResultCode|null
     */
    public function getCscResultCode()
    {
        return $this->container['csc_result_code'];
    }

    /**
     * Sets csc_result_code
     *
     * @param \ClearentTransactionsApi\Model\CscResultCode|null $csc_result_code csc_result_code
     *
     * @return self
     */
    public function setCscResultCode($csc_result_code)
    {
        $this->container['csc_result_code'] = $csc_result_code;

        return $this;
    }

    /**
     * Gets csc_result_code_description
     *
     * @return string|null
     */
    public function getCscResultCodeDescription()
    {
        return $this->container['csc_result_code_description'];
    }

    /**
     * Sets csc_result_code_description
     *
     * @param string|null $csc_result_code_description The description for the CSC match.
     *
     * @return self
     */
    public function setCscResultCodeDescription($csc_result_code_description)
    {
        $this->container['csc_result_code_description'] = $csc_result_code_description;

        return $this;
    }

    /**
     * Gets customer_first_name
     *
     * @return string|null
     */
    public function getCustomerFirstName()
    {
        return $this->container['customer_first_name'];
    }

    /**
     * Sets customer_first_name
     *
     * @param string|null $customer_first_name The first name of the customer.
     *
     * @return self
     */
    public function setCustomerFirstName($customer_first_name)
    {
        $this->container['customer_first_name'] = $customer_first_name;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id The customer ID.
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets customer_last_name
     *
     * @return string|null
     */
    public function getCustomerLastName()
    {
        return $this->container['customer_last_name'];
    }

    /**
     * Sets customer_last_name
     *
     * @param string|null $customer_last_name The last name of the customer.
     *
     * @return self
     */
    public function setCustomerLastName($customer_last_name)
    {
        $this->container['customer_last_name'] = $customer_last_name;

        return $this;
    }

    /**
     * Gets cvm
     *
     * @return \ClearentTransactionsApi\Model\Cvm|null
     */
    public function getCvm()
    {
        return $this->container['cvm'];
    }

    /**
     * Sets cvm
     *
     * @param \ClearentTransactionsApi\Model\Cvm|null $cvm cvm
     *
     * @return self
     */
    public function setCvm($cvm)
    {
        $this->container['cvm'] = $cvm;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The transaction description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets display_message
     *
     * @return string|null
     */
    public function getDisplayMessage()
    {
        return $this->container['display_message'];
    }

    /**
     * Sets display_message
     *
     * @param string|null $display_message The displayable message about the transaction result.
     *
     * @return self
     */
    public function setDisplayMessage($display_message)
    {
        $this->container['display_message'] = $display_message;

        return $this;
    }

    /**
     * Gets ebt_additional_amounts
     *
     * @return \ClearentTransactionsApi\Model\EBTAdditionalAmount[]|null
     */
    public function getEbtAdditionalAmounts()
    {
        return $this->container['ebt_additional_amounts'];
    }

    /**
     * Sets ebt_additional_amounts
     *
     * @param \ClearentTransactionsApi\Model\EBTAdditionalAmount[]|null $ebt_additional_amounts When the transaction is an EBT it will contain additional amount information.
     *
     * @return self
     */
    public function setEbtAdditionalAmounts($ebt_additional_amounts)
    {
        $this->container['ebt_additional_amounts'] = $ebt_additional_amounts;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string|null
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string|null $email_address The email address associated with the transaction.
     *
     * @return self
     */
    public function setEmailAddress($email_address)
    {
        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets emv
     *
     * @return \ClearentTransactionsApi\Model\EMV|null
     */
    public function getEmv()
    {
        return $this->container['emv'];
    }

    /**
     * Sets emv
     *
     * @param \ClearentTransactionsApi\Model\EMV|null $emv emv
     *
     * @return self
     */
    public function setEmv($emv)
    {
        $this->container['emv'] = $emv;

        return $this;
    }

    /**
     * Gets emv_data
     *
     * @return string|null
     */
    public function getEmvData()
    {
        return $this->container['emv_data'];
    }

    /**
     * Sets emv_data
     *
     * @param string|null $emv_data The EMV data passed from the terminal.
     *
     * @return self
     */
    public function setEmvData($emv_data)
    {
        $this->container['emv_data'] = $emv_data;

        return $this;
    }

    /**
     * Gets emv_data_response
     *
     * @return string|null
     */
    public function getEmvDataResponse()
    {
        return $this->container['emv_data_response'];
    }

    /**
     * Sets emv_data_response
     *
     * @param string|null $emv_data_response The EMV response data from the card issuer.
     *
     * @return self
     */
    public function setEmvDataResponse($emv_data_response)
    {
        $this->container['emv_data_response'] = $emv_data_response;

        return $this;
    }

    /**
     * Gets emv_entry_method
     *
     * @return \ClearentTransactionsApi\Model\EmvEntryMethod|null
     */
    public function getEmvEntryMethod()
    {
        return $this->container['emv_entry_method'];
    }

    /**
     * Sets emv_entry_method
     *
     * @param \ClearentTransactionsApi\Model\EmvEntryMethod|null $emv_entry_method emv_entry_method
     *
     * @return self
     */
    public function setEmvEntryMethod($emv_entry_method)
    {
        $this->container['emv_entry_method'] = $emv_entry_method;

        return $this;
    }

    /**
     * Gets entry_method
     *
     * @return string|null
     */
    public function getEntryMethod()
    {
        return $this->container['entry_method'];
    }

    /**
     * Sets entry_method
     *
     * @param string|null $entry_method The method used to enter the transaction.
     *
     * @return self
     */
    public function setEntryMethod($entry_method)
    {
        $this->container['entry_method'] = $entry_method;

        return $this;
    }

    /**
     * Gets exp_date
     *
     * @return string|null
     */
    public function getExpDate()
    {
        return $this->container['exp_date'];
    }

    /**
     * Sets exp_date
     *
     * @param string|null $exp_date The expiration date of the credit card in MMYY format.
     *
     * @return self
     */
    public function setExpDate($exp_date)
    {
        $this->container['exp_date'] = $exp_date;

        return $this;
    }

    /**
     * Gets first_recurring_transaction
     *
     * @return string|null
     */
    public function getFirstRecurringTransaction()
    {
        return $this->container['first_recurring_transaction'];
    }

    /**
     * Sets first_recurring_transaction
     *
     * @param string|null $first_recurring_transaction True if it is the first recurring transaction on a plan.
     *
     * @return self
     */
    public function setFirstRecurringTransaction($first_recurring_transaction)
    {
        $this->container['first_recurring_transaction'] = $first_recurring_transaction;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The ID of the transaction.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets invoice
     *
     * @return string|null
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     *
     * @param string|null $invoice The invoice number.
     *
     * @return self
     */
    public function setInvoice($invoice)
    {
        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets key_serial_number
     *
     * @return string|null
     */
    public function getKeySerialNumber()
    {
        return $this->container['key_serial_number'];
    }

    /**
     * Sets key_serial_number
     *
     * @param string|null $key_serial_number The serial number of the encrypted device.
     *
     * @return self
     */
    public function setKeySerialNumber($key_serial_number)
    {
        $this->container['key_serial_number'] = $key_serial_number;

        return $this;
    }

    /**
     * Gets last_four
     *
     * @return string|null
     */
    public function getLastFour()
    {
        return $this->container['last_four'];
    }

    /**
     * Sets last_four
     *
     * @param string|null $last_four The last four digits of the credit card.
     *
     * @return self
     */
    public function setLastFour($last_four)
    {
        $this->container['last_four'] = $last_four;

        return $this;
    }

    /**
     * Gets level3
     *
     * @return \ClearentTransactionsApi\Model\ClearentLevel3|null
     */
    public function getLevel3()
    {
        return $this->container['level3'];
    }

    /**
     * Sets level3
     *
     * @param \ClearentTransactionsApi\Model\ClearentLevel3|null $level3 level3
     *
     * @return self
     */
    public function setLevel3($level3)
    {
        $this->container['level3'] = $level3;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id The merchant ID of the transaction.
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id The order ID of the transaction.
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets original_amount
     *
     * @return string|null
     */
    public function getOriginalAmount()
    {
        return $this->container['original_amount'];
    }

    /**
     * Sets original_amount
     *
     * @param string|null $original_amount The original amount of the transaction prior to any modification.
     *
     * @return self
     */
    public function setOriginalAmount($original_amount)
    {
        $this->container['original_amount'] = $original_amount;

        return $this;
    }

    /**
     * Gets partial_approved
     *
     * @return bool|null
     */
    public function getPartialApproved()
    {
        return $this->container['partial_approved'];
    }

    /**
     * Sets partial_approved
     *
     * @param bool|null $partial_approved True if partial authorization has been approved.
     *
     * @return self
     */
    public function setPartialApproved($partial_approved)
    {
        $this->container['partial_approved'] = $partial_approved;

        return $this;
    }

    /**
     * Gets partial_authorization
     *
     * @return bool|null
     */
    public function getPartialAuthorization()
    {
        return $this->container['partial_authorization'];
    }

    /**
     * Sets partial_authorization
     *
     * @param bool|null $partial_authorization True if you would like to check partial authorization.
     *
     * @return self
     */
    public function setPartialAuthorization($partial_authorization)
    {
        $this->container['partial_authorization'] = $partial_authorization;

        return $this;
    }

    /**
     * Gets pending
     *
     * @return \ClearentTransactionsApi\Model\Pending|null
     */
    public function getPending()
    {
        return $this->container['pending'];
    }

    /**
     * Sets pending
     *
     * @param \ClearentTransactionsApi\Model\Pending|null $pending pending
     *
     * @return self
     */
    public function setPending($pending)
    {
        $this->container['pending'] = $pending;

        return $this;
    }

    /**
     * Gets plan_name
     *
     * @return string|null
     */
    public function getPlanName()
    {
        return $this->container['plan_name'];
    }

    /**
     * Sets plan_name
     *
     * @param string|null $plan_name The name of plan the transaction was ran under.
     *
     * @return self
     */
    public function setPlanName($plan_name)
    {
        $this->container['plan_name'] = $plan_name;

        return $this;
    }

    /**
     * Gets platform_fees
     *
     * @return \ClearentTransactionsApi\Model\PlatformFee[]|null
     */
    public function getPlatformFees()
    {
        return $this->container['platform_fees'];
    }

    /**
     * Sets platform_fees
     *
     * @param \ClearentTransactionsApi\Model\PlatformFee[]|null $platform_fees True if the batch was settled.
     *
     * @return self
     */
    public function setPlatformFees($platform_fees)
    {

        if (!is_null($platform_fees) && (count($platform_fees) > 2)) {
            throw new \InvalidArgumentException('invalid value for $platform_fees when calling TransactionModel., number of items must be less than or equal to 2.');
        }
        $this->container['platform_fees'] = $platform_fees;

        return $this;
    }

    /**
     * Gets purchase_order
     *
     * @return string|null
     */
    public function getPurchaseOrder()
    {
        return $this->container['purchase_order'];
    }

    /**
     * Sets purchase_order
     *
     * @param string|null $purchase_order The transaction purchase order.
     *
     * @return self
     */
    public function setPurchaseOrder($purchase_order)
    {
        $this->container['purchase_order'] = $purchase_order;

        return $this;
    }

    /**
     * Gets ref_id
     *
     * @return string|null
     */
    public function getRefId()
    {
        return $this->container['ref_id'];
    }

    /**
     * Sets ref_id
     *
     * @param string|null $ref_id The reference ID of a related transaction.
     *
     * @return self
     */
    public function setRefId($ref_id)
    {
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets result
     *
     * @return \ClearentTransactionsApi\Model\Result|null
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param \ClearentTransactionsApi\Model\Result|null $result result
     *
     * @return self
     */
    public function setResult($result)
    {
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets result_code
     *
     * @return string|null
     */
    public function getResultCode()
    {
        return $this->container['result_code'];
    }

    /**
     * Sets result_code
     *
     * @param string|null $result_code The result code associated with transaction result.
     *
     * @return self
     */
    public function setResultCode($result_code)
    {
        $this->container['result_code'] = $result_code;

        return $this;
    }

    /**
     * Gets sales_tax_amount
     *
     * @return string|null
     */
    public function getSalesTaxAmount()
    {
        return $this->container['sales_tax_amount'];
    }

    /**
     * Sets sales_tax_amount
     *
     * @param string|null $sales_tax_amount The amount of the sales tax.
     *
     * @return self
     */
    public function setSalesTaxAmount($sales_tax_amount)
    {
        $this->container['sales_tax_amount'] = $sales_tax_amount;

        return $this;
    }

    /**
     * Gets sales_tax_type
     *
     * @return \ClearentTransactionsApi\Model\SalesTaxType|null
     */
    public function getSalesTaxType()
    {
        return $this->container['sales_tax_type'];
    }

    /**
     * Sets sales_tax_type
     *
     * @param \ClearentTransactionsApi\Model\SalesTaxType|null $sales_tax_type sales_tax_type
     *
     * @return self
     */
    public function setSalesTaxType($sales_tax_type)
    {
        $this->container['sales_tax_type'] = $sales_tax_type;

        return $this;
    }

    /**
     * Gets server_id
     *
     * @return string|null
     */
    public function getServerId()
    {
        return $this->container['server_id'];
    }

    /**
     * Sets server_id
     *
     * @param string|null $server_id server_id
     *
     * @return self
     */
    public function setServerId($server_id)
    {
        $this->container['server_id'] = $server_id;

        return $this;
    }

    /**
     * Gets service_fee
     *
     * @return string|null
     */
    public function getServiceFee()
    {
        return $this->container['service_fee'];
    }

    /**
     * Sets service_fee
     *
     * @param string|null $service_fee The service fee applied to the transaction.
     *
     * @return self
     */
    public function setServiceFee($service_fee)
    {
        $this->container['service_fee'] = $service_fee;

        return $this;
    }

    /**
     * Gets settled
     *
     * @return \ClearentTransactionsApi\Model\Settled|null
     */
    public function getSettled()
    {
        return $this->container['settled'];
    }

    /**
     * Sets settled
     *
     * @param \ClearentTransactionsApi\Model\Settled|null $settled settled
     *
     * @return self
     */
    public function setSettled($settled)
    {
        $this->container['settled'] = $settled;

        return $this;
    }

    /**
     * Gets shipping
     *
     * @return \ClearentTransactionsApi\Model\Address|null
     */
    public function getShipping()
    {
        return $this->container['shipping'];
    }

    /**
     * Sets shipping
     *
     * @param \ClearentTransactionsApi\Model\Address|null $shipping shipping
     *
     * @return self
     */
    public function setShipping($shipping)
    {
        $this->container['shipping'] = $shipping;

        return $this;
    }

    /**
     * Gets signature_base_64_image
     *
     * @return string|null
     */
    public function getSignatureBase64Image()
    {
        return $this->container['signature_base_64_image'];
    }

    /**
     * Sets signature_base_64_image
     *
     * @param string|null $signature_base_64_image The signature from the EMV device.
     *
     * @return self
     */
    public function setSignatureBase64Image($signature_base_64_image)
    {
        $this->container['signature_base_64_image'] = $signature_base_64_image;

        return $this;
    }

    /**
     * Gets software_type
     *
     * @return string|null
     */
    public function getSoftwareType()
    {
        return $this->container['software_type'];
    }

    /**
     * Sets software_type
     *
     * @param string|null $software_type The reference to the software name you are building.
     *
     * @return self
     */
    public function setSoftwareType($software_type)
    {
        $this->container['software_type'] = $software_type;

        return $this;
    }

    /**
     * Gets software_type_version
     *
     * @return string|null
     */
    public function getSoftwareTypeVersion()
    {
        return $this->container['software_type_version'];
    }

    /**
     * Sets software_type_version
     *
     * @param string|null $software_type_version Optional field to help with troubleshooting.
     *
     * @return self
     */
    public function setSoftwareTypeVersion($software_type_version)
    {
        $this->container['software_type_version'] = $software_type_version;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The status of the transaction.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets surcharge_applied
     *
     * @return bool|null
     */
    public function getSurchargeApplied()
    {
        return $this->container['surcharge_applied'];
    }

    /**
     * Sets surcharge_applied
     *
     * @param bool|null $surcharge_applied True if you send a 'surcharge' in the request and the system determines it will be used.
     *
     * @return self
     */
    public function setSurchargeApplied($surcharge_applied)
    {
        $this->container['surcharge_applied'] = $surcharge_applied;

        return $this;
    }

    /**
     * Gets terminal_id
     *
     * @return string|null
     */
    public function getTerminalId()
    {
        return $this->container['terminal_id'];
    }

    /**
     * Sets terminal_id
     *
     * @param string|null $terminal_id The terminal ID of the transaction.
     *
     * @return self
     */
    public function setTerminalId($terminal_id)
    {
        $this->container['terminal_id'] = $terminal_id;

        return $this;
    }

    /**
     * Gets tip_adjusted
     *
     * @return string|null
     */
    public function getTipAdjusted()
    {
        return $this->container['tip_adjusted'];
    }

    /**
     * Sets tip_adjusted
     *
     * @param string|null $tip_adjusted True if the tip was adjusted.
     *
     * @return self
     */
    public function setTipAdjusted($tip_adjusted)
    {
        $this->container['tip_adjusted'] = $tip_adjusted;

        return $this;
    }

    /**
     * Gets tip_adjusted_amount
     *
     * @return string|null
     */
    public function getTipAdjustedAmount()
    {
        return $this->container['tip_adjusted_amount'];
    }

    /**
     * Sets tip_adjusted_amount
     *
     * @param string|null $tip_adjusted_amount The amount of the new tip after a tip adjust.
     *
     * @return self
     */
    public function setTipAdjustedAmount($tip_adjusted_amount)
    {
        $this->container['tip_adjusted_amount'] = $tip_adjusted_amount;

        return $this;
    }

    /**
     * Gets tip_amount
     *
     * @return string|null
     */
    public function getTipAmount()
    {
        return $this->container['tip_amount'];
    }

    /**
     * Sets tip_amount
     *
     * @param string|null $tip_amount The tip amount for the transaction.
     *
     * @return self
     */
    public function setTipAmount($tip_amount)
    {
        $this->container['tip_amount'] = $tip_amount;

        return $this;
    }

    /**
     * Gets token_description
     *
     * @return string|null
     */
    public function getTokenDescription()
    {
        return $this->container['token_description'];
    }

    /**
     * Sets token_description
     *
     * @param string|null $token_description The description of the token.
     *
     * @return self
     */
    public function setTokenDescription($token_description)
    {
        $this->container['token_description'] = $token_description;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \ClearentTransactionsApi\Model\Type|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \ClearentTransactionsApi\Model\Type|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets voided
     *
     * @return \ClearentTransactionsApi\Model\Voided|null
     */
    public function getVoided()
    {
        return $this->container['voided'];
    }

    /**
     * Sets voided
     *
     * @param \ClearentTransactionsApi\Model\Voided|null $voided voided
     *
     * @return self
     */
    public function setVoided($voided)
    {
        $this->container['voided'] = $voided;

        return $this;
    }

    /**
     * Gets voided_auth
     *
     * @return \ClearentTransactionsApi\Model\VoidedAuth|null
     */
    public function getVoidedAuth()
    {
        return $this->container['voided_auth'];
    }

    /**
     * Sets voided_auth
     *
     * @param \ClearentTransactionsApi\Model\VoidedAuth|null $voided_auth voided_auth
     *
     * @return self
     */
    public function setVoidedAuth($voided_auth)
    {
        $this->container['voided_auth'] = $voided_auth;

        return $this;
    }

    /**
     * Gets voucher_approval_code
     *
     * @return string|null
     */
    public function getVoucherApprovalCode()
    {
        return $this->container['voucher_approval_code'];
    }

    /**
     * Sets voucher_approval_code
     *
     * @param string|null $voucher_approval_code voucher_approval_code
     *
     * @return self
     */
    public function setVoucherApprovalCode($voucher_approval_code)
    {
        $this->container['voucher_approval_code'] = $voucher_approval_code;

        return $this;
    }

    /**
     * Gets voucher_serial_number
     *
     * @return string|null
     */
    public function getVoucherSerialNumber()
    {
        return $this->container['voucher_serial_number'];
    }

    /**
     * Sets voucher_serial_number
     *
     * @param string|null $voucher_serial_number voucher_serial_number
     *
     * @return self
     */
    public function setVoucherSerialNumber($voucher_serial_number)
    {
        $this->container['voucher_serial_number'] = $voucher_serial_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


