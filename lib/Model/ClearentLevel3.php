<?php
/**
 * ClearentLevel3
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  ClearentTransactionsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Clearent Transactions API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ClearentTransactionsApi\Model;

use \ArrayAccess;
use \ClearentTransactionsApi\ObjectSerializer;

/**
 * ClearentLevel3 Class Doc Comment
 *
 * @category Class
 * @package  ClearentTransactionsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ClearentLevel3 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ClearentLevel3';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'customer_vat_registration_number' => 'string',
        'destination_country_code' => 'string',
        'discount_amount' => 'string',
        'duty_amount' => 'string',
        'freight_amount' => 'string',
        'order_date' => 'string',
        'summary_commodity_code' => 'string',
        'vat_tax_amount' => 'string',
        'vat_tax_rate' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'customer_vat_registration_number' => null,
        'destination_country_code' => null,
        'discount_amount' => null,
        'duty_amount' => null,
        'freight_amount' => null,
        'order_date' => null,
        'summary_commodity_code' => null,
        'vat_tax_amount' => null,
        'vat_tax_rate' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_vat_registration_number' => 'customer-vat-registration-number',
        'destination_country_code' => 'destination-country-code',
        'discount_amount' => 'discount-amount',
        'duty_amount' => 'duty-amount',
        'freight_amount' => 'freight-amount',
        'order_date' => 'order-date',
        'summary_commodity_code' => 'summary-commodity-code',
        'vat_tax_amount' => 'vat-tax-amount',
        'vat_tax_rate' => 'vat-tax-rate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_vat_registration_number' => 'setCustomerVatRegistrationNumber',
        'destination_country_code' => 'setDestinationCountryCode',
        'discount_amount' => 'setDiscountAmount',
        'duty_amount' => 'setDutyAmount',
        'freight_amount' => 'setFreightAmount',
        'order_date' => 'setOrderDate',
        'summary_commodity_code' => 'setSummaryCommodityCode',
        'vat_tax_amount' => 'setVatTaxAmount',
        'vat_tax_rate' => 'setVatTaxRate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_vat_registration_number' => 'getCustomerVatRegistrationNumber',
        'destination_country_code' => 'getDestinationCountryCode',
        'discount_amount' => 'getDiscountAmount',
        'duty_amount' => 'getDutyAmount',
        'freight_amount' => 'getFreightAmount',
        'order_date' => 'getOrderDate',
        'summary_commodity_code' => 'getSummaryCommodityCode',
        'vat_tax_amount' => 'getVatTaxAmount',
        'vat_tax_rate' => 'getVatTaxRate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customer_vat_registration_number'] = $data['customer_vat_registration_number'] ?? null;
        $this->container['destination_country_code'] = $data['destination_country_code'] ?? null;
        $this->container['discount_amount'] = $data['discount_amount'] ?? null;
        $this->container['duty_amount'] = $data['duty_amount'] ?? null;
        $this->container['freight_amount'] = $data['freight_amount'] ?? null;
        $this->container['order_date'] = $data['order_date'] ?? null;
        $this->container['summary_commodity_code'] = $data['summary_commodity_code'] ?? null;
        $this->container['vat_tax_amount'] = $data['vat_tax_amount'] ?? null;
        $this->container['vat_tax_rate'] = $data['vat_tax_rate'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer_vat_registration_number
     *
     * @return string|null
     */
    public function getCustomerVatRegistrationNumber()
    {
        return $this->container['customer_vat_registration_number'];
    }

    /**
     * Sets customer_vat_registration_number
     *
     * @param string|null $customer_vat_registration_number Visa only, a 13-character Value Added Tax registration number supplied by the commercial card brand.
     *
     * @return self
     */
    public function setCustomerVatRegistrationNumber($customer_vat_registration_number)
    {
        $this->container['customer_vat_registration_number'] = $customer_vat_registration_number;

        return $this;
    }

    /**
     * Gets destination_country_code
     *
     * @return string|null
     */
    public function getDestinationCountryCode()
    {
        return $this->container['destination_country_code'];
    }

    /**
     * Sets destination_country_code
     *
     * @param string|null $destination_country_code A 3-character field identifying the code of the country where the goods are being shipped.
     *
     * @return self
     */
    public function setDestinationCountryCode($destination_country_code)
    {
        $this->container['destination_country_code'] = $destination_country_code;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return string|null
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param string|null $discount_amount Visa only, the total discount amount applied against the line item totals that are provided on a per transaction basis.
     *
     * @return self
     */
    public function setDiscountAmount($discount_amount)
    {
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets duty_amount
     *
     * @return string|null
     */
    public function getDutyAmount()
    {
        return $this->container['duty_amount'];
    }

    /**
     * Sets duty_amount
     *
     * @param string|null $duty_amount The duty fee amount that will be added to the purchase amount.
     *
     * @return self
     */
    public function setDutyAmount($duty_amount)
    {
        $this->container['duty_amount'] = $duty_amount;

        return $this;
    }

    /**
     * Gets freight_amount
     *
     * @return string|null
     */
    public function getFreightAmount()
    {
        return $this->container['freight_amount'];
    }

    /**
     * Sets freight_amount
     *
     * @param string|null $freight_amount freight_amount
     *
     * @return self
     */
    public function setFreightAmount($freight_amount)
    {
        $this->container['freight_amount'] = $freight_amount;

        return $this;
    }

    /**
     * Gets order_date
     *
     * @return string|null
     */
    public function getOrderDate()
    {
        return $this->container['order_date'];
    }

    /**
     * Sets order_date
     *
     * @param string|null $order_date The purchase order date for large ticket transactions.
     *
     * @return self
     */
    public function setOrderDate($order_date)
    {
        $this->container['order_date'] = $order_date;

        return $this;
    }

    /**
     * Gets summary_commodity_code
     *
     * @return string|null
     */
    public function getSummaryCommodityCode()
    {
        return $this->container['summary_commodity_code'];
    }

    /**
     * Sets summary_commodity_code
     *
     * @param string|null $summary_commodity_code Visa only, a 4-character international description code of the overall goods or services being supplied.
     *
     * @return self
     */
    public function setSummaryCommodityCode($summary_commodity_code)
    {
        $this->container['summary_commodity_code'] = $summary_commodity_code;

        return $this;
    }

    /**
     * Gets vat_tax_amount
     *
     * @return string|null
     */
    public function getVatTaxAmount()
    {
        return $this->container['vat_tax_amount'];
    }

    /**
     * Sets vat_tax_amount
     *
     * @param string|null $vat_tax_amount Visa only, a 4-character field containing the amount of any value added tax that will be added to the purchase amount.
     *
     * @return self
     */
    public function setVatTaxAmount($vat_tax_amount)
    {
        $this->container['vat_tax_amount'] = $vat_tax_amount;

        return $this;
    }

    /**
     * Gets vat_tax_rate
     *
     * @return string|null
     */
    public function getVatTaxRate()
    {
        return $this->container['vat_tax_rate'];
    }

    /**
     * Sets vat_tax_rate
     *
     * @param string|null $vat_tax_rate Visa only, a 4-character field containing the tax rate to calculate the sales tax amount that appears in Payment transaction identified. Visa, tax rated used for fuel purchases.
     *
     * @return self
     */
    public function setVatTaxRate($vat_tax_rate)
    {
        $this->container['vat_tax_rate'] = $vat_tax_rate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


