<?php
/**
 * EMV
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ClearentTransactionsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Clearent Transactions API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ClearentTransactionsApi\Model;

use \ArrayAccess;
use \ClearentTransactionsApi\ObjectSerializer;

/**
 * EMV Class Doc Comment
 *
 * @category Class
 * @package  ClearentTransactionsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EMV implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EMV';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'application_id' => 'string',
        'application_name' => 'string',
        'application_transaction_counter' => 'string',
        'iad' => 'string',
        'terminal_verification_results' => 'string',
        'transaction_certificate' => 'string',
        'transaction_status_information' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'application_id' => null,
        'application_name' => null,
        'application_transaction_counter' => null,
        'iad' => null,
        'terminal_verification_results' => null,
        'transaction_certificate' => null,
        'transaction_status_information' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'application_id' => 'application-id',
        'application_name' => 'application-name',
        'application_transaction_counter' => 'application-transaction-counter',
        'iad' => 'iad',
        'terminal_verification_results' => 'terminal-verification-results',
        'transaction_certificate' => 'transaction-certificate',
        'transaction_status_information' => 'transaction-status-information'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'application_id' => 'setApplicationId',
        'application_name' => 'setApplicationName',
        'application_transaction_counter' => 'setApplicationTransactionCounter',
        'iad' => 'setIad',
        'terminal_verification_results' => 'setTerminalVerificationResults',
        'transaction_certificate' => 'setTransactionCertificate',
        'transaction_status_information' => 'setTransactionStatusInformation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'application_id' => 'getApplicationId',
        'application_name' => 'getApplicationName',
        'application_transaction_counter' => 'getApplicationTransactionCounter',
        'iad' => 'getIad',
        'terminal_verification_results' => 'getTerminalVerificationResults',
        'transaction_certificate' => 'getTransactionCertificate',
        'transaction_status_information' => 'getTransactionStatusInformation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['application_id'] = $data['application_id'] ?? null;
        $this->container['application_name'] = $data['application_name'] ?? null;
        $this->container['application_transaction_counter'] = $data['application_transaction_counter'] ?? null;
        $this->container['iad'] = $data['iad'] ?? null;
        $this->container['terminal_verification_results'] = $data['terminal_verification_results'] ?? null;
        $this->container['transaction_certificate'] = $data['transaction_certificate'] ?? null;
        $this->container['transaction_status_information'] = $data['transaction_status_information'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets application_id
     *
     * @return string|null
     */
    public function getApplicationId()
    {
        return $this->container['application_id'];
    }

    /**
     * Sets application_id
     *
     * @param string|null $application_id The value displayed on EMV receipt.
     *
     * @return self
     */
    public function setApplicationId($application_id)
    {
        $this->container['application_id'] = $application_id;

        return $this;
    }

    /**
     * Gets application_name
     *
     * @return string|null
     */
    public function getApplicationName()
    {
        return $this->container['application_name'];
    }

    /**
     * Sets application_name
     *
     * @param string|null $application_name The name of the credit card that was used.
     *
     * @return self
     */
    public function setApplicationName($application_name)
    {
        $this->container['application_name'] = $application_name;

        return $this;
    }

    /**
     * Gets application_transaction_counter
     *
     * @return string|null
     */
    public function getApplicationTransactionCounter()
    {
        return $this->container['application_transaction_counter'];
    }

    /**
     * Sets application_transaction_counter
     *
     * @param string|null $application_transaction_counter application_transaction_counter
     *
     * @return self
     */
    public function setApplicationTransactionCounter($application_transaction_counter)
    {
        $this->container['application_transaction_counter'] = $application_transaction_counter;

        return $this;
    }

    /**
     * Gets iad
     *
     * @return string|null
     */
    public function getIad()
    {
        return $this->container['iad'];
    }

    /**
     * Sets iad
     *
     * @param string|null $iad iad
     *
     * @return self
     */
    public function setIad($iad)
    {
        $this->container['iad'] = $iad;

        return $this;
    }

    /**
     * Gets terminal_verification_results
     *
     * @return string|null
     */
    public function getTerminalVerificationResults()
    {
        return $this->container['terminal_verification_results'];
    }

    /**
     * Sets terminal_verification_results
     *
     * @param string|null $terminal_verification_results This information helps determine if terminal is EMV.
     *
     * @return self
     */
    public function setTerminalVerificationResults($terminal_verification_results)
    {
        $this->container['terminal_verification_results'] = $terminal_verification_results;

        return $this;
    }

    /**
     * Gets transaction_certificate
     *
     * @return string|null
     */
    public function getTransactionCertificate()
    {
        return $this->container['transaction_certificate'];
    }

    /**
     * Sets transaction_certificate
     *
     * @param string|null $transaction_certificate transaction_certificate
     *
     * @return self
     */
    public function setTransactionCertificate($transaction_certificate)
    {
        $this->container['transaction_certificate'] = $transaction_certificate;

        return $this;
    }

    /**
     * Gets transaction_status_information
     *
     * @return string|null
     */
    public function getTransactionStatusInformation()
    {
        return $this->container['transaction_status_information'];
    }

    /**
     * Sets transaction_status_information
     *
     * @param string|null $transaction_status_information The charge back status of the transaction.
     *
     * @return self
     */
    public function setTransactionStatusInformation($transaction_status_information)
    {
        $this->container['transaction_status_information'] = $transaction_status_information;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


